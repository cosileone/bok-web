// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   createdBy   User   @relation(fields: [createdById], references: [id])
//   createdById String
//
//   @@index([name])
//   @@index([createdById])
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Preregistration {
  id          Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String      @unique
  newsletter  Boolean     @default(false)
  dateOfBirth DateTime?   @db.Date
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  QuizResult  QuizResult?
}

model QuizAnswer {
  id        Int      @id @default(autoincrement())
  question  Int // 1-4
  answer    String
  score     Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, question])
  @@index([userId])
}

model QuizResult {
  id        Int             @id @default(autoincrement())
  score     Int
  userId    Int             @unique
  user      Preregistration @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            Int          @id @default(autoincrement())
  publicId      String       @unique @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  clerkId       String?
  accounts      Account[]
  sessions      Session[]
  quizAnswers   QuizAnswer[]
  userProfile   UserProfile?
}

model UserProfile {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  industry               String
  estimatedMonthlyIncome Int
  savingsRate            Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
