// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   createdBy   User   @relation(fields: [createdById], references: [id])
//   createdById String
//
//   @@index([name])
//   @@index([createdById])
// }

model Company {
  id               Int     @id @default(autoincrement())
  slug             String  @unique @default(cuid())
  name             String  @unique
  isOnboarded      Boolean @default(false)
  isSubscribed     Boolean @default(false)
  isActive         Boolean @default(true)
  stripeCustomerId String? @unique
  subscriptionId   String?
  clerkId          String? @unique
  logoUrl          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users Employee[]

  @@index(stripeCustomerId)
}

enum EmployeeRole {
  ADMIN
  HR
  EMPLOYEE
}

model Employee {
  id              Int          @id @default(autoincrement())
  publicId        String       @unique @default(cuid())
  firstName       String?
  lastName        String?
  nickname        String?
  email           String
  externalEmail   String?
  isEmailVerified Boolean      @default(false)
  isOnboarded     Boolean      @default(false)
  isActive        Boolean      @default(false)
  role            EmployeeRole @default(EMPLOYEE)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  userId    Int?
  User      User?   @relation(fields: [userId], references: [id])

  @@index([email, companyId])
}

model Preregistration {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String       @unique
  newsletter  Boolean      @default(false)
  dateOfBirth DateTime?    @db.Date
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  quizResult  QuizResult?
  quizAnswers QuizAnswer[]
}

model QuizAnswer {
  id        Int             @id @default(autoincrement())
  question  Int // 1-4
  answer    String
  score     Int
  userId    Int
  user      Preregistration @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([userId, question])
  @@index([userId])
}

model QuizResult {
  id        Int             @id @default(autoincrement())
  score     Int
  userId    Int             @unique
  user      Preregistration @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([userId])
}

model User {
  id            Int          @id @default(autoincrement())
  publicId      String       @unique @default(cuid())
  firstName     String?
  lastName      String?
  nickname      String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  clerkId       String?      @unique
  accounts      Employee[]
  userProfile   UserProfile?

  @@index([clerkId])
}

model UserProfile {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  industry               String
  estimatedMonthlyIncome Int
  savingsRate            Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userId])
}
